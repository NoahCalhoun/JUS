<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAFAAAACUAAAAxgAA
        AOQAAADuAAAA7gAAAOQAAADKAAAAnAAAAFoAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHAAAAJAAAADwAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPYAAACeAAAAKAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAHwAAAD0AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD6AAAAkAAA
        AAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAADEAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA1gAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiAAAA3gAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA7AAAADYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAA
        AN4AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA7AAAACoAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAQAAADAAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA2AAAAAwAAAAAAAAAAAAA
        AAAAAAAAAAAAdAAAAP8AAAD/AAAA/wAAAOYAAABwAAAAYgAAAGAAAABeAAAAXgAAAF4AAABeAAAAXgAA
        AF4AAABeAAAAXgAAAF4AAABeAAAAXgAAAF4AAABgAAAAYgAAAGoAAADWAAAA/wAAAP8AAAD/AAAAlgAA
        AAAAAAAAAAAAAAAAABYAAADwAAAA/wAAAP8AAAD/AAAAigAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAA
        AFwAAABcAAAAXAAAAFwAAABcAAAAXAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGoAAAD/AAAA/wAA
        AP8AAAD6AAAALgAAAAAAAAAAAAAAhAAAAP8AAAD/AAAA/wAAAP8AAACEAAAAEAAAAB4AAAAMAAAAAAAA
        AAAAAAAKAAAA6gAAAP8AAAD/AAAA/wAAAP8AAAD2AAAAHgAAAAAAAAAAAAAACgAAABwAAAAYAAAAYgAA
        AP8AAAD/AAAA/wAAAP8AAACmAAAAAAAAAAQAAADoAAAA/wAAAP8AAAD/AAAA/wAAAIAAAAA2AAAA/wAA
        ALwAAAAAAAAAAAAAAAAAAABEAAAA7gAAAP8AAAD/AAAA9gAAAF4AAAAAAAAAAAAAAAAAAACaAAAA/wAA
        AFgAAABeAAAA/wAAAP8AAAD/AAAA/wAAAPgAAAAUAAAAQgAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAfgAA
        ADgAAAD/AAAA+gAAABoAAAAAAAAAAAAAAAAAAAAUAAAAXAAAAGAAAAAeAAAAAAAAAAAAAAAAAAAABgAA
        AOwAAAD/AAAAWgAAAF4AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAGQAAACEAAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAB+AAAAOgAAAP8AAAB0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAASgAAAP8AAABcAAAAXgAAAP8AAAD/AAAA/wAAAP8AAAD/AAAApgAAALQAAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAH4AAAA6AAAA/wAAAIoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAB0AAAA/wAAAFwAAABcAAAA/wAAAP8AAAD/AAAA/wAAAP8AAADWAAAA0AAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAAfgAAADwAAAD/AAAA/wAAAIYAAAAgAAAA0AAAAK4AAAAyAAAAAAAA
        AAAAAAAiAAAAoAAAANoAAAAwAAAAcgAAAP8AAAD/AAAAXAAAAFwAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AOwAAADaAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAB+AAAAPAAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AHwAAAAAAAAAAAAAAFoAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAABcAAAAXAAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA7gAAANoAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAH4AAAA8AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAAxAAAAGIAAABiAAAAsAAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAFwAAABcAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAADuAAAA0AAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAfgAAADwAAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAXAAA
        AFwAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAO4AAAC0AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAB+AAAAPAAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAABcAAAAXAAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA1gAAAIQAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AH4AAAA8AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAFwAAABcAAAA/wAAAP8AAAD/AAAA/wAAAP8AAACkAAAAQAAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAAgAAAADwAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAAXAAAAF4AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAGIAAAACAAAA5gAA
        AP8AAAD/AAAA/wAAAP8AAACCAAAAGgAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAAA
        AHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAAAoAAAAXgAAAP8AAAD/AAAA/wAAAP8AAAD4AAAAFAAA
        AAAAAACAAAAA/wAAAP8AAAD/AAAA/wAAAIQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAACAAAADMAAAAMAAAAMoAAAA6AAAAwAAAAE4AAABiAAAA/wAAAP8AAAD/AAAA/wAA
        AKQAAAAAAAAAAAAAABIAAADuAAAA/wAAAP8AAAD/AAAAngAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAJQAAAAaAAAAkAAAACIAAACIAAAAMgAAAHwAAAD/AAAA/wAA
        AP8AAAD6AAAAKgAAAAAAAAAAAAAAAAAAAGwAAAD/AAAA/wAAAP8AAAD8AAAAyAAAALoAAAC2AAAAtgAA
        ALQAAAC0AAAAtAAAALQAAAC0AAAAtAAAALQAAAC0AAAAtAAAALQAAAC2AAAAuAAAALoAAADCAAAA+AAA
        AP8AAAD/AAAA/wAAAJAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAALoAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAADUAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAANgAAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA6gAAACYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHgAA
        ANoAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAOoAAAAyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAFAAAAL4AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADSAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAHQAAADyAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD4AAAAigAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAACKAAAA7AAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADyAAAAmAAAACIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAASgAA
        AIwAAAC8AAAA3gAAAOwAAADoAAAA3gAAAMIAAACSAAAAUgAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//AP//+AAf//AAB//AAAP/gAAB/wAAAP4AAAB+H//4PB///DgfgfwYE8
        PMGDP/zBA3/+wAM//sADE8zAAwPAwAMBgMADAADAAwAAwAMAAMCBAADBgf//wYH/6sHB/+rD4AAAA+AA
        AAfwAAAP+AAAH/wAAD//AAB//4AB///wD/8=
</value>
  </data>
</root>